# üê≥ Titanic ML - Docker Compose Configuration
# ============================================

version: '3.8'

services:
  # Main API service
  titanic-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: titanic-ml-api
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - LOG_LEVEL=INFO
      - RATE_LIMIT_ENABLED=true
      - AUTH_ENABLED=false
    volumes:
      - ./models:/app/models:ro  # Mount models directory (read-only)
      - ./logs:/app/logs         # Mount logs directory
      - ./data:/app/data:ro      # Mount data directory (read-only)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - titanic-network

  # Nginx reverse proxy (production setup)
  nginx:
    image: nginx:alpine
    container_name: titanic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates
    depends_on:
      - titanic-api
    restart: unless-stopped
    networks:
      - titanic-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: titanic-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - titanic-network

  # PostgreSQL for logging/analytics (optional)
  postgres:
    image: postgres:15-alpine
    container_name: titanic-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=titanic_ml
      - POSTGRES_USER=titanic
      - POSTGRES_PASSWORD=titanic123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - titanic-network

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: titanic-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - titanic-network

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: titanic-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - titanic-network

# Networks
networks:
  titanic-network:
    driver: bridge

# Volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local